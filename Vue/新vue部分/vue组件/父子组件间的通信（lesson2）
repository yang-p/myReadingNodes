组件间通信涉及到的实例方法：
						$emit $children $parent $on 
父组件的数据传给子组件：
						如果父组件传给子组件的数据为基本数据类型，
						那么当子组件改变该数据时，不会触发父组件的该数据改变。

						如果父组件传给子组件的数据为引用数据类型，
						那么当子组件改变该数据时，触发父组件的该数据改变。

同级组件的数据通信：
					新创建一个Vue实例化对象，let vm = new Vue();
					组件b想要使用组件a的数据，那么组件a的方法里面需要vm.$emit('key',value)
					组件b的方法里面需要vm.$on('key',(data)=>{})



父组件传递数据给子组件的方法：
							props属性：
										特点：传递的数据是单向的，即只能从父组件流向子组件
										两种写法，数组和对象形式
										props属性和data属性的区别：
																props声明的数据来自父级，data中的数据是组件自身的数据

										props验证数据的写法：
															propA: Number //必须是数字类型
															propB: [String,Number] //必须是字符串类型或数字类型
															propC: {type:Boolean,default: true} //布尔值，如果没有定义默认值就是true
															propD: {type:Number, required:ture} //数字，而且是必传的属性

										props的type的属性值为：
															String、NUmber、Boolean、Object、Array、Function、自定义构造器


							this.$parent	组件树中的根组件实例



子组件传递数据给父组件的方法：
				 第一种：	 this.$emit('自定义事件','要传给父组件的数据')  //当执行该方法时，触发自定义事件的执行，从而执行父组件的方法
							父组件通过在子组件上添加 v-on：自定义事件 = '父组件的方法'    来接收数据。
							父组件的方法接收一个参数，该参数就是子组件传递给父组件的数据
							【拓展】v-on不仅能监听自定义事件，还能监听DOM事件，给v-on加上.native修饰符表示监听一个原生事件，并且监听的是该组件的根元素。


				第二种：	该方法是第一种的语法糖。
							子组件仍然是通过this.$emit('input','要传输的数据')，【自定义事件必须是input】
							父组件通过在子组件上添加 v-model = '' 来接收数据。

				第三种：	父组件通过this.children可以访问到直接子组件的实例

				第四种：	给子组件添加ref属性，父组件通过this.$refs获取某个具体子组件的实例
							注意点：
									$refs只在组件渲染完成后才填充，并且是非响应式的，它仅仅作为直接访问子组件的应急方案，避免在模板或计算属性中使用$refs


任何组件传递数据的方法：
						第一种： 创建一个新的Vue实例对象作为中介，let bus = new Vue
								然后在传递数据的组件中使用， bus.$emit('自定义事件','要传输的数据')
								接着在要接收数据的组件的mounted函数中使用， bus.$on('自定义事件',function(data){})
								【拓展】该方法适用于vue1.x和vue2.x版本，如果要深入使用，那么就给作为中介的Vue添加data、methods/、computed等属性。