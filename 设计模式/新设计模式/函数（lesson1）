注意点：
		1、函数也是变量
		2、给对象里面的[函数]的返回值写成return this 实现链式调用。
		3、通过函数的作用域特性实现变量的私有或公有。

初始版：		在全局直接声明[函数]

第一次升级：	将[函数]放在字面量对象中，作为对象的属性

第二次升级：	写一个函数，其返回值为一个对象，对象里面放[函数]	

第三次升级：	写一个构造函数，将[函数]通过this.的形式放在该构造函数里，然后通过new构造函数返回的对象去访问[函数]。

第四次升级：	写一个构造函数，将[函数]放在该构造函数的原型对象里面。

第五次升级：	在Function的prototype上写一个功能为添加[函数]的函数addMethod, 该函数的参数为函数名和函数，
				函数内部写法为{this[fnName] = fn}，实现链式调用写法为{this[fnName] = fn; return this}
				然后普通函数调用addMethod方法

第六次升级：	在第五次升级的基础上，修改 {this.prototype[fnName] = fn}

-----------------------------------------------------------------------------------------
解决方案：
		场景：构造函数实例化时，未使用new关键字
		危害：this指向该函数所在的作用域的对象
		解决办法： 
					在构造函数里面进行判断函数执行时this是否是当前这个对象
					if(this instanceof Person) {
						this.name = name
						this.age = age
					}else {
						return new Person(name, age)
					}
		
		